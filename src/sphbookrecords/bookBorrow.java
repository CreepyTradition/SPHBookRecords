/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package sphbookrecords;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Perks
 */
public class bookBorrow extends javax.swing.JFrame {

    /**
     * Creates new form bookBorrow
     */
    public bookBorrow() {
        initComponents();
        displayTable();
    }

    public void displayTable(){
        updateTable();
        try{
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost/sphbookinventory","root","");
            
            Statement st = con.createStatement();
            String sql = "select * from bookroster";
            ResultSet rs = st.executeQuery(sql);
            System.out.println("Hi");
            while(rs.next()){
                String ID = String.valueOf(rs.getInt("ID"));
                String Title = String.valueOf(rs.getString("title"));
                String Author = String.valueOf(rs.getString("author"));
                String Quantity = String.valueOf(rs.getString("quantity"));
                
                String tbData[] = {ID, Title,Author,Quantity};
                  DefaultTableModel tblModel = (DefaultTableModel)ContainerTable.getModel();
                  tblModel.addRow(tbData);
                
            }
            con.close();
        } catch(Exception e){
            System.out.println(e.getMessage());
        }
        
    }
    
     private void updateTable(){
          DefaultTableModel tblModel = (DefaultTableModel)ContainerTable.getModel();
          tblModel.setRowCount(0);
          ContainerTable.revalidate();
     }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        borrowButtons = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ContainerTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        bookTitle = new javax.swing.JLabel();
        bookAuthor = new javax.swing.JLabel();
        fieldTitle = new javax.swing.JTextField();
        fieldAuthor = new javax.swing.JTextField();
        borrowButton = new javax.swing.JButton();
        returnButton = new javax.swing.JButton();
        mainMenu = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Borrow Book");

        jPanel1.setBackground(new java.awt.Color(0, 51, 204));

        ContainerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "Title", "Author", "Quantity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ContainerTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ContainerTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(ContainerTable);
        if (ContainerTable.getColumnModel().getColumnCount() > 0) {
            ContainerTable.getColumnModel().getColumn(0).setResizable(false);
            ContainerTable.getColumnModel().getColumn(1).setResizable(false);
            ContainerTable.getColumnModel().getColumn(2).setResizable(false);
            ContainerTable.getColumnModel().getColumn(3).setResizable(false);
        }

        jLabel1.setFont(new java.awt.Font("Addington CF Regular", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Borrow Book:");

        bookTitle.setFont(new java.awt.Font("Addington CF Regular", 0, 18)); // NOI18N
        bookTitle.setForeground(new java.awt.Color(255, 255, 255));
        bookTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        bookTitle.setText("Title:");

        bookAuthor.setFont(new java.awt.Font("Addington CF Regular", 0, 18)); // NOI18N
        bookAuthor.setForeground(new java.awt.Color(255, 255, 255));
        bookAuthor.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        bookAuthor.setText("Author");

        fieldTitle.setFont(new java.awt.Font("Addington CF Regular", 0, 18)); // NOI18N

        fieldAuthor.setFont(new java.awt.Font("Addington CF Regular", 0, 18)); // NOI18N

        borrowButton.setFont(new java.awt.Font("Addington CF Regular", 0, 18)); // NOI18N
        borrowButton.setText("Borrow");
        borrowButtons.add(borrowButton);
        borrowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                borrowButtonActionPerformed(evt);
            }
        });

        returnButton.setFont(new java.awt.Font("Addington CF Regular", 0, 18)); // NOI18N
        returnButton.setText("Return");
        borrowButtons.add(returnButton);
        returnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnButtonActionPerformed(evt);
            }
        });

        mainMenu.setFont(new java.awt.Font("Addington CF Regular", 0, 18)); // NOI18N
        mainMenu.setText("Main Menu");
        borrowButtons.add(mainMenu);
        mainMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainMenuActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bookTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(bookAuthor, javax.swing.GroupLayout.DEFAULT_SIZE, 81, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fieldAuthor, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(mainMenu, javax.swing.GroupLayout.DEFAULT_SIZE, 147, Short.MAX_VALUE)
                                .addGap(51, 51, 51))
                            .addComponent(fieldTitle)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(borrowButton, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(returnButton, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(18, 18, 18)))
                .addGap(48, 48, 48)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 456, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bookTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fieldTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bookAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fieldAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(borrowButton, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(returnButton, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mainMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mainMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainMenuActionPerformed
        mainMenu maNu = new mainMenu();
        maNu.displayform();
        this.dispose();
    }//GEN-LAST:event_mainMenuActionPerformed

    private void borrowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_borrowButtonActionPerformed
    String title = fieldTitle.getText();
    String author = fieldAuthor.getText();
    
    try {
        Class.forName("com.mysql.cj.jdbc.Driver");
        Connection con1 = DriverManager.getConnection("jdbc:mysql://localhost/sphbookinventory","root","");
        
        String checkQuery = "SELECT * FROM bookroster WHERE `title`=? AND `author`=? AND `quantity`>0";
        PreparedStatement checkStatement = con1.prepareStatement(checkQuery);
        checkStatement.setString(1, title);
        checkStatement.setString(2, author);
        ResultSet checkResultSet = checkStatement.executeQuery();
    
        
        if (checkResultSet.next()) {
            System.out.println("hi2");
            String updateQuery = "UPDATE bookroster SET `quantity`=0 WHERE `title`=? AND `author`=?";
            PreparedStatement updateStatement = con1.prepareStatement(updateQuery);
            updateStatement.setString(1, title);
            updateStatement.setString(2, author);
            
            int rowsUpdated = updateStatement.executeUpdate();
            
            if (rowsUpdated > 0) {
                JOptionPane.showMessageDialog(this, "Book Borrowed");
                fieldTitle.setText("");
                fieldAuthor.setText("");
                fieldTitle.requestFocus();
                displayTable();
            } else {
                JOptionPane.showMessageDialog(this, "No stock of this book");
            }
        } else {
            JOptionPane.showMessageDialog(this, "No stock of this book");
        }
        
    } catch (ClassNotFoundException | SQLException ex) {
        Logger.getLogger(bookBorrow.class.getName()).log(Level.SEVERE, null, ex);
    }
    }//GEN-LAST:event_borrowButtonActionPerformed

    private void ContainerTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ContainerTableMouseClicked
        DefaultTableModel model = (DefaultTableModel) ContainerTable.getModel();
        int tableVar = ContainerTable.getSelectedRow();
        try {
            
            fieldTitle.setText(model.getValueAt(tableVar, 1).toString());
            fieldAuthor.setText(model.getValueAt(tableVar, 2).toString());
        }catch(Exception fault){
    }//GEN-LAST:event_ContainerTableMouseClicked
}
    private void returnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnButtonActionPerformed
        String title = fieldTitle.getText();
        String author = fieldAuthor.getText();
        try {
                Class.forName("com.mysql.cj.jdbc.Driver");
                Connection con1 = DriverManager.getConnection("jdbc:mysql://localhost/sphbookinventory","root","");
    
                // Check if the record exists before updating
                String checkQuery = "SELECT * FROM bookroster WHERE `title`=? AND `author`=?";
                PreparedStatement checkStatement = con1.prepareStatement(checkQuery);
                checkStatement.setString(1, title);
                checkStatement.setString(2, author);
                ResultSet checkResultSet = checkStatement.executeQuery();
    
                if (checkResultSet.next()) {
                    // Record exists, proceed with update
                    String updateQuery = "UPDATE bookroster SET `quantity`=1 WHERE `title`=? AND `author`=?";
                    PreparedStatement updateStatement = con1.prepareStatement(updateQuery);
                    updateStatement.setString(1, title);
                    updateStatement.setString(2, author);
        
                    int rowsUpdated = updateStatement.executeUpdate();
        
                    if (rowsUpdated > 0) {
                        JOptionPane.showMessageDialog(this, "Book Returned");
                        fieldTitle.setText("");
                        fieldAuthor.setText("");
                        fieldTitle.requestFocus();
                        displayTable();
                    } else {
                    JOptionPane.showMessageDialog(this, "Failed to update record");
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "No record found with the given title and author");
                }
    
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(bookBorrow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_returnButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(bookBorrow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(bookBorrow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(bookBorrow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(bookBorrow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new bookBorrow().setVisible(true);
            }
        });
    }
    
    public void displayform() {
        setVisible(true);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable ContainerTable;
    private javax.swing.JLabel bookAuthor;
    private javax.swing.JLabel bookTitle;
    private javax.swing.JButton borrowButton;
    private javax.swing.ButtonGroup borrowButtons;
    private javax.swing.JTextField fieldAuthor;
    private javax.swing.JTextField fieldTitle;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton mainMenu;
    private javax.swing.JButton returnButton;
    // End of variables declaration//GEN-END:variables
}
